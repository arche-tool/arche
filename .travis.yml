sudo: required

language: generic

services:
  - docker

matrix:
  include:
    - os: linux
      env: BUILD=linux
    - os: linux
      env: BUILD=windows
    # - os: osx
    #   env: BUILD=osx

git:
  # whether to recursively clone submodules
  submodules: true

cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  # - $TRAVIS_BUILD_DIR/.stack-work

before_install:
  - export TAG=$(git describe --abbrev=4 --dirty --always --tags)
  - echo "CIng version $TAG"
  - mkdir -p $TRAVIS_BUILD_DIR/.stack-work
  - chmod -R 2777 "$TRAVIS_BUILD_DIR/.stack-work"
  - git submodule foreach --recursive  "mkdir -p .stack-work/ && chmod -R 2777 .stack-work/"

install:
  - |
    set -ex
    case "$BUILD" in
      linux)
        docker build -t linux_gamma -f linux.Dockerfile .
        ;;
      windows)
        docker build -t wine_gamma -f wine.Dockerfile .
        ;;
    esac
    set +ex

script:
  - |
    set -ex
    case "$BUILD" in
      linux)
        docker container run  -v $(pwd):/appdata linux_gamma:latest stack install --allow-different-user --local-bin-path ".output/$BUILD-$TAG"
        ;;
      windows)
        docker container run  -v $(pwd):/appdata wine_gamma:latest stack.exe install --allow-different-user --local-bin-path ".output/$BUILD-$TAG"
        ;;
    esac
    set +ex

after_success:
  - |
    set -ex
    case "$BUILD" in
      linux)
        echo "linux bin"
        ls -lah ".output/$BUILD-$TAG/"
        ;;
      windows)
        echo "win bin"
        ls -lah ".output/$BUILD-$TAG/"
        ;;
    esac
    set +ex

after_failure:
  - df -h
  - |
    case "$BUILD" in
      linux)
        echo "linux bin"
        echo $PATH
        ;;
      windows)
        echo "win bin"
        echo $PATH
        ;;
    esac

# deploy:
#   provider: releases
#   api_key: "GITHUB OAUTH TOKEN"
#   file: "FILE TO UPLOAD"
#   skip_cleanup: true
#   on:
#     tags: true
